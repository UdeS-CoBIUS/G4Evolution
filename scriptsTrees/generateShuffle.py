#!/usr/bin/env python
# -*- coding: utf-8 -*-:v

import math
from Bio import SeqIO
import multiprocessing
from functools import partial
from ushuffle import shuffle, Shuffler

def shuff(fileseq):
    dico = {'Tri': {}, 'Di': {}, 'Mono': {}}
    try:
        fastaOrigin = SeqIO.parse(open(fileseq),'fasta')
    except:
        print(fileseq)
    else:

        for fasta in fastaOrigin:
            name, seq = fasta.id, str(fasta.seq)
            seq = bytes(seq, "utf8")
            if name not in dico['Tri']:
                dico['Tri'][name] = {}
                dico['Di'][name] = {}
                dico['Mono'][name] = {}

            shufflerMono = Shuffler(seq, 1)
            for repro in range(1, 11):
                seqres = shufflerMono.shuffle()
                seqres = seqres.decode("utf-8")
                dico['Mono'][name][repro] = seqres

            shufflerDi = Shuffler(seq, 2)
            for repro in range(1, 11):
                seqres = shufflerDi.shuffle()
                seqres = seqres.decode("utf-8")
                dico['Di'][name][repro] = seqres

            shufflerTri = Shuffler(seq, 3)
            for repro in range(1, 11):
                seqres = shufflerTri.shuffle()
                seqres = seqres.decode("utf-8")
                dico['Tri'][name][repro] = seqres

    return dico

def generateShuffles(grp):
    fileGeneSeq = 'FastaOrtho/grpOrtho_' +grp+'.fa'
    shuffDico = shuff(fileGeneSeq)

    for kmer in shuffDico:
        for idseq in shuffDico[kmer]:
            for repro in shuffDico[kmer][idseq]:
                outFilename = 'FastaOrthoShuffle/grpOrtho'+grp+'_Repro'+str(repro)+'_'+kmer+'.fa'
                output = open(outFilename, "a")
                output.write(">"+idseq + "\n")
                nbLine = math.ceil( float( len(shuffDico[kmer][idseq][repro]) ) / 60 )
                cpt1 = 0
                cpt2 = 60
                for i in range(0,int(nbLine)) :
                    output.write(shuffDico[kmer][idseq][repro][cpt1:cpt2] + "\n")
                    # to have a new line after 60 characters
                    cpt1 += 60
                    cpt2 += 60
                output.close()

def main():
    grpList = ['13473', '15654', '13174', '13237', '13145', '13119', '13261', '13235', '15715', '13429', '13260', '13529', '13384', '13300', '13419', '13180', '13187', '13162', '13322', '13368', '13420', '13476', '13426', '13111', '13229', '13495', '13340', '13273', '13325', '13501', '13193', '13208', '13183', '13271', '13392', '13120', '13152', '13391', '13139', '13502', '13516', '15708', '26714', '15699', '13341', '13118', '13292', '13472', '15775', '13311', '13487', '13306', '13430', '13547', '13522', '13521', '13355', '13387', '13184', '13236', '13530', '13526', '15714', '13129', '13359', '13182', '13313', '13323', '13351', '13385', '13354', '13439', '15726', '13267', '13275', '10069', '453', '13838', '14050', '14169', '10217', '14603', '167', '139', '111', '354', '13251', '307', '10051', '13246', '14082', '14173', '10176', '13356', '10040', '13906', '9950', '9977', '10227', '20956', '7885', '484', '27', '10027', '68', '9884', '9898', '10136', '230', '100', '14297', '408', '9895', '10149', '461', '74', '14487', '293', '9936', '9867', '72', '7955', '10129', '15784', '14643', '13245', '9930', '10034', '227', '13423', '13498', '413', '13232', '10198', '14448', '13829', '9828', '10068', '10172', '13893', '14492', '10001', '10209', '10232', '13343', '7911', '13546', '9929', '13175', '13332', '214', '15710', '9844', '9857', '9955', '10041', '372', '10194', '14214', '14245', '9969', '13134', '13176', '14231', '7962', '13216', '456', '14446', '9833', '13404', '13144', '13447', '13458', '10066', '8053', '13422', '14035', '10230', '9851', '13952', '10042', '489', '7987', '14193', '10013', '14085', '28', '9913', '14618', '10058', '14191', '14534', '9982', '13542', '13541', '13981', '13543', '13480', '13367', '10231', '10156', '13192', '15785', '21178', '13223', '497', '380', '14136', '8040', '10166', '10050', '482', '15782', '10128', '14177', '7882', '13828', '14484', '13179', '14536', '301', '13485', '10118', '9904', '10223', '13441', '14383', '14217', '13257', '7902', '62', '16535', '21271', '9869', '13248', '14324', '9834', '15709', '13244', '14109', '13171', '10016', '14162', '494', '13167', '339', '9879', '9881', '10226', '140', '13225', '84', '10102', '13886', '13262', '14248', '13151', '9874', '9988', '332', '13407', '14449', '427', '14599', '7875', '14187', '13438', '13326', '14012', '14520', '15758', '266', '13282', '14662', '13269', '13433', '13297', '10059', '13403', '10174', '9915', '244', '13933', '15630', '94', '13258', '13159', '10215', '10052', '9905', '10169', '7853', '13298', '502', '196', '198', '300', '369', '225', '13115', '10196', '329', '10153', '13885', '14220', '13824', '13966', '9976', '14226', '13936', '10124', '14071', '171', '14123', '8016', '14260', '469', '13929', '9886', '89', '14057', '13799', '15558', '10144', '411', '14395', '10114', '342', '9882', '20990', '302', '7957', '205', '10130', '9951', '10056', '13877', '14699', '7916', '424', '15525', '10143', '264', '288', '10022', '10150', '10197', '284', '392', '9888', '14313', '13949', '398', '206', '9919', '8013', '14346', '228', '9927', '10147', '14223', '458', '10030', '10113', '7917', '13950', '379', '486', '14544', '7886', '14456', '7883', '10031', '14590', '29', '9819', '439', '9958', '10033', '14457', '9829', '10177', '56', '7982', '357', '9900', '311', '88', '9893', '14365', '14259', '13910', '9817', '220', '438', '14119', '10039', '10141', '10167', '10159', '13', '145', '202', '352', '38', '13823', '14060', '191', '14673', '10', '7984', '10182', '14362', '9996', '7940', '212', '14153', '20954', '13925', '312', '9949', '7861', '9', '13976', '9914', '10161', '344', '9964', '281', '113', '13944', '14219', '14030', '9980', '7991', '14255', '9897', '10192', '305', '7889', '14281', '10076', '11', '136', '9458', '6876', '7250', '4570', '3064', '8005', '16731', '1454', '8135', '14829', '1805', '6475', '746', '9449', '7899', '4415', '7021', '8241', '18476', '20015', '19311', '9032', '4723', '3046', '9682', '9195', '2139', '5723', '16631', '4195', '2070', '14798', '8136', '5778', '4432', '17206', '5601', '5183', '1273', '9214', '15378', '5879', '7187', '15878', '3909', '2885', '9325', '4364', '14985', '8861', '5254', '5481', '6953', '6309', '1705', '6816', '19644', '3018', '3765', '1792', '15330', '20328', '9660', '1023', '5563', '5242', '9270', '3729', '4280', '11076', '8110', '1542', '11232', '2041', '3900', '19494', '16772', '3056', '15946', '7261']

    p = multiprocessing.Pool(2)
    func = partial(generateShuffles)
    data = p.map(func, [ i for i in grpList ])
    p.close()

if __name__ == '__main__':
    main()
